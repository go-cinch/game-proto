syntax = "proto3";

package game.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
// the validate rules:
// https://github.com/envoyproxy/protoc-gen-validate
import "validate/validate.proto";

option go_package = "api/game;game";
option java_multiple_files = true;
option java_package = "game.v1";
option java_outer_classname = "GameProtoV1";

// The game service definition.
service Game {
  rpc Idempotent (google.protobuf.Empty) returns (IdempotentReply) {
    option (google.api.http) = {
      get: "/idempotent"
    };
  }
  rpc CreateGame (CreateGameRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/game"
      body: "*"
    };
  }
  rpc GetGame (GetGameRequest) returns (GetGameReply) {
    option (google.api.http) = {
      get: "/game/{id}"
    };
  }
  rpc FindGame (FindGameRequest) returns (FindGameReply) {
    option (google.api.http) = {
      get: "/game"
    };
  }
  rpc UpdateGame (UpdateGameRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/game/{id}"
      body: "*",
      additional_bindings {
        patch: "/game/{id}",
        body: "*",
      }
    };
  }
  rpc DeleteGame (IdsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/game/{ids}"
    };
  }
}

message Page {
  uint64 num = 1;
  uint64 size = 2;
  int64 total = 3;
  bool disable = 4;
}

message IdsRequest {
  string ids = 1;
}

message IdempotentReply {
  string token = 1;
}

message GameReply {
  uint64 id = 1;
  string name = 2;
  int32 age = 3;
}

message CreateGameRequest {
  string name = 1 [(validate.rules).string = {min_len: 2, max_len: 50}]; // the name of string must be between 2 and 50 character
  int32 age = 2 [(validate.rules).int32 = {gte: 0}];                     // the age of int32 must be >= 0
}

message GetGameRequest {
  uint64 id = 1;
}

message GetGameReply {
  uint64 id = 1;
  string name = 2;
  int32 age = 3;
}

message FindGameRequest {
  Page page = 1;
  optional string name = 2;
  optional int32 age = 3;
}

message FindGameReply {
  Page page = 1;
  repeated GameReply list = 2;
}

message UpdateGameRequest {
  uint64 id = 1;
  optional string name = 2 [(validate.rules).string = {min_len: 2, max_len: 50}]; // the name of string must be between 2 and 50 character
  optional int32 age = 3 [(validate.rules).int32 = {gte: 0}];                     // the age of int32 must be >= 0
}
